// couldnt get this to work for the life of me
// so chatgpt it is

plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "openlight" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    client {
        java {
            srcDirs = ['src/client/java']
        }
        resources {
            srcDirs = ['src/client/resources']
        }
    }
}

dependencies {
    shadow 'net.dv8tion:JDA:5.3.0'
    implementation 'net.dv8tion:JDA:5.3.0'

    // Minecraft & Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation files('libs/baritone-api-fabric-1.11.1.jar')
    modImplementation files('libs/nether-pathfinder-57.jar')
}

processResources {
    from('src/main/resources') {
        include '**/*.csv'
    }

    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from(sourceSets.client.output)
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    from(sourceSets.client.output)
    archiveClassifier.set("all") // optional for clarity
}

remapJar {
    dependsOn shadowJar
    inputFile.set(shadowJar.archiveFile.get().asFile)
    archiveClassifier.set("all-remapped")
}

build.dependsOn remapJar

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}
